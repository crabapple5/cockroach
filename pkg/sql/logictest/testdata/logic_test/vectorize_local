# LogicTest: local-vec

statement ok
CREATE TABLE a (a INT, b INT, c INT4, PRIMARY KEY (a, b))

statement ok
CREATE TABLE c (a INT, b INT, c INT, d INT, PRIMARY KEY (a, c), INDEX sec (b))

statement ok
CREATE TABLE d (a INT, b INT, PRIMARY KEY (b, a))

statement ok
INSERT INTO a SELECT g//2, g, g FROM generate_series(0,2000) g(g)

statement ok
INSERT INTO c VALUES (1, 1, 1, 0), (2, 1, 2, 0)

statement ok
ALTER TABLE c INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1,
    "distinct_count": 1
  }
]'

statement ok
INSERT INTO d VALUES (1, 1), (1, 2)

# Test that vectorized stats are collected correctly.
statement ok
SET vectorize = on

statement ok
SET distsql = on

statement ok
SET vectorize_row_count_threshold = 0

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT a FROM a]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkMFO4zAQhu_7FNZ_2pW8kHACn1pBkCKFtjQ9AFUObjIqkdzY2BNEVeXdUeIe4IDEcb75Zux_TghvBgplVmS3G9F7I-7XywexzZ5WxTxfiPliXjy_ZOLvXV5uysfinzirOoq6gkRnG1roAwWoLVJUEs7bmkKwfkSnScibD6hEou1czyOuJGrrCeoEbtkQFDZ6Z2hNuiF_mUCiIdatmdbqmfPtQfsjJEqnu6DEf0gse1ZilkJip7l-pSBsz26EV5Dg3pmvKElGM5Chmtv3lo9KJBc31yNjbYzg9kBKJAHVIBGnzj8NrPcElQ7y92nWFJztAn0L8tPmZKgkqNlTvFiwva9p5W09PRPL5TQ3gYYCx24ai7yLraEa_nwGAAD__80elhA=

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c JOIN d ON d.b = c.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJykUl2rEzEUfPdXHOZJIdbdPgaEFq3Qy7p7bfugXvYhTQ7X6DZZk6z2UvrfZT-QVvELHzNn5pyZISfEzw0ktqti9WJHXWjo1aZ6TXert7fFcl3SslwW796v6PHL9Xa3fVM8oYmqZ2qkarqp1iUZqkoysz09Jz3b1xBw3nCpDhwh75CjFmiD1xyjDz10Gghrc4TMBKxru9TDtYD2gSFPSDY1DImd2je8YWU4PMsgYDgp2wxr9SKyhsC2VS5KegqBqkuSFrlYzCGwV0l_4Ei-S22P5xBIXdtcQD0tcsM62S82PUjKZll_JSbVNJTsgSVlEfVZYJRMLmNS9wyZn8XfJ7nx1k1B8usgZtEGe1DhAQKF95-6lj5668g7SUOSKRYEgv8aKbAyk_drn70Bw0e6YOXfwZ-4_9EPH1l3yXr3547m_9LRhmPrXeSrfn61OTvXAmzuefxR0XdB823wejgzPqtBNwCGYxqn-fhYu3HUG7wU578Vz38Q1-dH3wIAAP__db8M5w==

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c INNER MERGE JOIN d ON c.a = d.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJy8klFr2zAUhd_3Ky73qWVaartvgkLC5g2XxO6cPGwrflCku1SgWJ4kj5aQ_z4sF1aXrqVj7M06Op-kc64P6H8Y5LjOl_n7DfTOwMe6WsF1_uVquShKWJSL5ddvOZx8KNab9eflKdxb5UyMVglFWeY1rPL6Uw6XVVGCgqqMhgtQs22DDFurqBR78sivMcWGYeesJO-tG6RDNBTqFnnCULddHwa5YSitI-QHDDoYQo4bsTVUk1DkzhJkqCgIbeKxct45vRfuDhmuO9F6Du-QYdUHDvMUGW5FkDfkwfahG8RBC31nHkgZMvRkSAb9U4c7DsksGa7xQRgDQe-JQ-KxOTIckftn-iB2hDw9sr-Lkk6jqOeiZP8lSvbHKL8T9K11ihypyeubgXzJ8kQfK3I7urS6JXeWTfsw9D2czNO3pxdO727Gz381Wrol2Qdt25c7OX_NeGvynW09Pe7myZOToRBSOxoL9rZ3kq6clfGacVlFLgqKfBh3s3FRtHEr_n8P4fQVcPYYzp6FzydwcmyOb34FAAD__9nfYyI=

statement ok
RESET vectorize; RESET distsql; RESET vectorize_row_count_threshold

statement ok
SET tracing=off

# Making sure that colBatchScan operator can parallelize scans.
# This test is similar to that in testplannerlogic/select
statement ok
CREATE TABLE tpar (
    a INT PRIMARY KEY, item STRING, price FLOAT, FAMILY (a, item, price),
    UNIQUE INDEX item (item), UNIQUE INDEX p (price)
)

statement ok
ALTER TABLE tpar SPLIT AT VALUES(5)

# Run a select to prime the range cache to simplify the trace below.
statement ok
SELECT * FROM tpar

# Make sure that the scan actually gets parallelized.
statement ok
SET tracing = on; SELECT * FROM tpar WHERE a = 0 OR a = 10; SET tracing = off

# The span "sending partial batch" means that the scan was parallelized.
# Note that table ID here is hardcoded, so if a new table is created before
# tpar, this query will need an adjustment.
query T
SELECT message FROM [SHOW TRACE FOR SESSION] WHERE message IN
    ('querying next range at /Table/56/1/0',
     'querying next range at /Table/56/1/10',
     '=== SPAN START: kv.DistSender: sending partial batch ==='
    )
----
querying next range at /Table/56/1/0
=== SPAN START: kv.DistSender: sending partial batch ===
querying next range at /Table/56/1/10

# Regression test for #46123 (rowexec.TableReader not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46123(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev(0) FROM t46123 WHERE ('' COLLATE en)::BOOL
----
│
└ Node 1
└ *rowexec.orderedAggregator
  └ *rowexec.tableReader

# Regression test for #46122 (checking that we gracefully fallback to row
# execution on cross joins).
statement ok
CREATE TABLE t46122_0(c0 STRING); CREATE TABLE t46122_1(c0 STRING)

query T
EXPLAIN (VEC) SELECT t46122_0.c0 FROM t46122_0, t46122_1
----
│
└ Node 1
└ *rowexec.hashJoiner
  ├ *colexec.colBatchScan
  └ *colexec.colBatchScan

# Regression test for #46404 (rowexec.noopProcessor not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46404_0(c0 INT); CREATE TABLE t46404_1(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev((t46404_1.c0 > ANY (0, 0))::INT) FROM t46404_0, t46404_1 GROUP BY t46404_0.rowid
----
│
└ Node 1
└ *rowexec.hashAggregator
  └ *rowexec.noopProcessor
    └ *colexec.hashJoiner
      ├ *colexec.colBatchScan
      └ *colexec.colBatchScan

statement ok
CREATE TABLE xyz (
  x INT,
  y INT,
  z TEXT
)

# Check that we fallback gracefully to row-by-row engine on a join type that
# we don't support.
query T
EXPLAIN (VEC) (SELECT y FROM xyz) EXCEPT ALL (SELECT x AS y FROM xyz) ORDER BY y
----
│
└ Node 1
  └ *colexec.sortOp
    └ *rowexec.hashJoiner
      ├ *colexec.colBatchScan
      └ *colexec.colBatchScan
